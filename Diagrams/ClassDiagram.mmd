classDiagram
direction RL

    %% Observer Pattern - Left Side
    class Subject {
        + void attach(Observer* observer)
        + void detach(Observer* observer)
        + void notify()
    }

    class Observer {
        + void update(vector<vector<int>> data)
    }

    class ConcreteSubject {
        - vector<Observer*> observers
        - vector<vector<int>> data
        + void setData(vector<vector<int>> newData)
        + vector<vector<int>> getData()
        + void attach(Observer* observer)
        + void detach(Observer* observer)
        + void notify()
    }

    class ConsoleObserver {
        + void update(vector<vector<int>> data)
    }

    class SFMLObserver {
        - int cellSize
        - sf::RenderWindow window
        - int gridWidth
        - int gridHeight
        + SFMLObserver(int cellSize = 20)
        + void update(vector<vector<int>> data)
        + void initialize(vector<vector<int>> data)
        + sf::RenderWindow& getWindow()
        + bool isWindowOpen()
    }

    class FileObserver {
        - string filePath
        + FileObserver(string filePath)
        + void update(vector<vector<int>> data)
    }

    %% Core Classes - Center
    class Game {
        - string file
        - Grid grid
        - int nbIteration
        - int delay
        - vector<vector<int>> currentState
        - vector<vector<int>> twoIterationsAgoState
        - bool isStatic
        - bool isEmpty
        - bool repeat
        + Game(string filePath, int iterations, int delay)
        + void PrintData()
        + void GetFile()
        + void UpdateGrid()
        + void ValidateGrid()
        + void End()
        + void Run()
        + int CountNeighbors(int row, int col)
    }

    %% Grid Handling - Right Side
    class Cells {
        - bool state
        - string position
        + bool GetState()
        + void SetState(bool newState)
        + string GetPosition()
    }

    class Grid {
        - vector<vector<int>> data
        + void CreateGrid(vector<vector<int>> inputData)
        + const vector<vector<int>>& GetData()
        + void Validate(GridVerify validator)
    }

    class GridVerify {
        - bool isEmpty
        - bool isEqual
        + void VerifyGrid(const vector<vector<int>>& gridData)
        + bool GetIsEmpty() const
        + bool GetIsEqual() const
    }

    %% File Handling - Independent
    class FileParser {
        - int length
        - int width
        - vector<vector<int>> data
        + FileParser(string filePath)
        + int GetLength() const
        + int GetWidth() const
        + const vector<vector<int>>& GetData() const
    }

    class FileVerify {
        - bool SizeOk
        - bool ValuesOk
        + void Verify(vector<vector<int>> data, int expectedLength, int expectedWidth)
        + bool GetSizeOk() const
        + bool GetValuesOk() const
    }

    %% Testing - Independent
    class UnitaryTest {
        + void RunAllTests()
        + void TestGridValidation()
        + void TestGameLogic()
        + void TestFileHandling()
    }

    %% Menu System - Independent
    class Menu {
        - string filePath
        - int iterations
        - int displayChoice
        - int delay
        + Menu()
        + void ShowMenu()
        + string GetFilePath() const
        + int GetIterations() const
        + int GetDisplayChoice() const
        + int GetDelay() const
    }


    %% Relationships
    Subject <|-- ConcreteSubject : Héritage
    ConcreteSubject <|-- Game : Héritage
    Observer <|-- ConsoleObserver : Héritage
    Observer <|-- SFMLObserver : Héritage
    Observer <|-- FileObserver : Héritage
    ConcreteSubject --> Observer : Association Unidirectionnelle
    FileParser --> FileVerify : Dépendance
    Game --> FileParser : Dépendance
    Game --> FileVerify : Dépendance
    Game *--> Grid : Composition
    Grid *--> Cells : Composition
    Grid --> GridVerify : Dépendance
    Menu --> Game : Dépendance
    UnitaryTest --> GridVerify : Dépendance
    UnitaryTest --> Game : Dépendance
    UnitaryTest --> FileParser : Dépendance
